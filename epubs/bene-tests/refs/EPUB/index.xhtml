<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html 
  xmlns="http://www.w3.org/1999/xhtml" 
  xml:lang="en" 
  lang="en" 
  xmlns:epub="http://www.idpf.org/2007/ops" 
  epub:prefix="bene: http://example.com"
>
  <head>
    <title>Can EPUB Replace PDF?</title>
    <meta charset="utf-8"></meta>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
  </head>
  <body>
    <header>
      <div class="title" id="title">Can EPUB Replace PDF?</div>
      <div class="author">Will Crichton</div>
      <div class="date">January 11, 2024</div>
      <div class="abstract">TODO: abstract</div>
    </header>
    <section>
      <h1 id="good-and-bad-pdf">The Good and Bad of PDF</h1>

      <p>
        PDF is the <i>de facto</i> file format for reading and sharing digital documents. Papers, textbooks, flyers, you name it.
        People use PDFs rather than a DOC or a JPEG for several reasons:
      </p>

      <ul>
        <li><strong>PDFs are self-contained.</strong> A PDF is a single file that contains all the images, fonts, and other data needed to render it. It's easy to pass around a PDF, and a PDF is unlikely to be missing some critical dependency on your computer.</li>
        <li><strong>PDFs are rendered consistently.</strong> A PDF specifies precisely how it should be rendered, like "render this text at position X, Y". These low-level instructions mean that an author can be confident that a PDF will render the same for a reader as for the author. A PDF will render basically the same on every device.</li>
        <li><strong>PDFs are rendered well.</strong> A PDF is a vector format, so it can render vector objects (like text) at arbitrary scales. Because PDFs are naturally chunked into pages, a PDF viewer can efficiently render a large PDF by only displaying a few pages at a time. A giant JPG has neither of these qualities.</li>
        <li><strong>PDFs are stable over time.</strong> PDFs from decades ago still render the same today. PDFs have a <a href="https://www.iso.org/standard/75839.html">relatively stable standard.</a> PDFs cannot be easily edited like a DOC file. PDFs are well-suited for archiving.</li>
      </ul>

      <p>Yet, in the 32 years since the initial release of PDF, a lot has changed. People print out documents less and less. People use phones, tablets, and e-readers to read digital documents. The internet happened; web browsers now provide an expressive platform for rendering rich documents. These changes have laid bare the limitations of PDF:</p>

      <ul>
        <li><strong>PDFs cannot easily adapt to different screen sizes.</strong> Most PDFs are designed to mimic 8.5x11" paper (or worse, <a href="https://en.wikipedia.org/wiki/PDF#/media/File:Seitengroesse_PDF_7.png">145,161 km<sup>2</sup></a>). These PDFs are readable on a computer monitor, but they are less readable on a tablet, and far less readable on a phone.</li>
        <li><strong>PDFs cannot be easily understood by screen readers.</strong> A plain PDF is just a scattered sequence of lines and characters. A screen reader <a href="https://dl.acm.org/doi/10.1145/2851581.2892588">may not know</a> which order to read through the text.</li>
        <li><strong>PDFs cannot be easily parsed by a program.</strong> Extracting tables out of a PDF is an <a href="https://openaccess.thecvf.com/content/CVPR2022/html/Smock_PubTables-1M_Towards_Comprehensive_Table_Extraction_From_Unstructured_Documents_CVPR_2022_paper.html">open</a> <a href="https://ieeexplore.ieee.org/document/5277546">area</a> of <a href="https://www.sciencedirect.com/science/article/pii/S030645731830205X?casa_token=jNV6uhUNLs0AAAAA:p6EMBh3X54Ulv9Ghtca1WPR2iL6fkhpVOVsbXj7zzinRYVa72HUGQb6VBOIPFdFoHwjEGDSB">research</a>.</li>
        <li><strong>PDFs cannot easily express interaction.</strong> PDFs were primarily designed as static documents that cannot react to user input beyond filling in forms.</li>
      </ul>
 
      <p>
        The underlying issue behind all four bullets is that PDF's core representation of a document is fundamentally unstructured. A PDF consists of commands like:
      </p>
      
      <figure>
      <pre>Move the cursor to the right by 0.5 inches.
Set the current font color to black.
Draw the text "Hello World" at the current position.</pre>
      </figure>

      <p>A document is organized into sentences, paragraphs and sections. PDF commands are "unstructured" because a PDF's organization is only clear to a person looking at the rendered document, and not clear from the commands themselves. Reflowing, accessibility, data extraction, and interaction <em>all</em> rely on understanding the structure of a document, and hence these aspects are not easy to integrate with PDFs.</p>

      <p>So we arrive at the key question: <strong>how can we design digital documents with the benefits of PDFs but without the limitations?</strong></p>
    </section>


    <section>
      <h1 id="cant-fix-pdf">Can't We Just Fix PDF?</h1>

      <p>A simple answer is to improve the PDF format. After all, we already have millions of PDFs — why bother with another format?</p>

      <p>In fact, the designers of PDF are well aware of its limitations. I carefully hedged each bullet with the phrase "easily", because PDF does make it <em>possible</em> to overcome each limitation, at least partially. PDFs can be annotated with their <a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/library/pdfmark/pdfmark_Logical.html">logical structure</a> to create a <a href="https://www.washington.edu/accesstech/documents/tagged-pdf/">tagged PDF</a>. Most PDF exporters will not add tags automatically — the simplest option is to use Adobe's subscription-only <a href="https://www.adobe.com/acrobat/acrobat-pro.html">Acrobat Pro</a>, which provides an "Automatically tag PDF" action. For example, here is <a href="https://arxiv.org/abs/2310.04368">a recent paper of mine</a> with added tags:</p>

      <figure>
        <img src="img/tags.jpg" width="500" class="border" />
        <figcaption>A LaTeX-generated paper with automatically added tags.</figcaption>
      </figure>

      <p>
        If you squint, you can see that the logical structure closely resembles the HTML document model. The document has sections, headings, paragraphs, and links. Adobe characterizes the logical structure as an accessibility feature, but it has other benefits. You may be surprised to know that Adobe Acrobat allows you to reflow tagged PDFs at different screen sizes. You may be unsurprised to know that reflowing does not always work well. For example:
      </p>

      <figure>
        <figure>
          <img src="img/before-resize.jpg" class="border" />
          <figcaption>
            A section of the paper in its default fixed layout. 
            Note that the second paragraph is wrapped around the code snippet.
          </figcaption>
        </figure>
        <figure>
          <img src="img/after-resize.jpg" class="border" width="350" />
          <figcaption>
            The same section of the paper after reflowing to a smaller width. 
            Note that the code is now interleaved with the second paragraph.
          </figcaption>
        </figure>
      </figure>

      <p>
        In theory, these issues could be fixed. If the world's PDF exporters could be modified to include logical structure. If Adobe's reflowing algorithm could be improved to fix its edge cases. If the reflowing algorithm could be specified, and if Adobe were willing to release it publicly, and if it were implemented in each PDF viewer. And that doesn't even cover interaction! So in practice, I don't we can just fix the PDF format, at least within a reasonable time frame.
      </p>
    </section>

    <section>
      <h1 id="good-and-bad-html">The Good and Bad of HTML</h1>

      <p>In the meantime, we already have a structured document format which can be flexibly and interactively rendered: HTML (and CSS and Javascript, but short-handed just as "HTML"). The HTML format provides almost exactly the inverse advantages and disadvantages of PDF. HTML documents can be flexibly rendered at multiple screen sizes. HTML provides both an inherent structure plus <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA">additional attributes</a> to support accessibility tools. HTML documents can be parsed and queried in most programming languages.</p>
      
      <p>And of course, HTML supports a wide variety of interactions through Javascript. People have used HTML to produce amazing interactive documents that would be impossible in PDF. Think: <a href="https://distill.pub/">Distill.pub</a>, <a href="https://explorabl.es/">Explorable Explanations</a>, <a href="https://ciechanow.ski/">Bartosz Ciechanowski</a>, and <a href="http://worrydream.com/">Bret Victor</a>, just to name a few. I think moving towards better digital documents can raise both the floor <em>and</em> the ceiling of document quality.</p>

      <p>However, HTML cannot yet be a drop-in replacement for PDF. HTML documents are not self-contained. HTML dynamic layout means a reader may see a subtantially different document than its author. HTML does not have a natural chunking into pages. The HTML standard is continually evolving, and browsers differ in their rendering strategies.</p>

      <p>
        So I've been thinking: <strong>how can we design HTML documents to gain the benefits of PDFs without losing the key strengths of HTML?</strong>
        Thus far, the answer seems to be: EPUB.
      </p>
    </section>

    <section>
      <h1 id="epub-intro">An Intro to EPUB</h1>

      <p>
        EPUB is a "distribution and interchange format for digital publications and documents", per the <a href="https://www.w3.org/TR/epub-overview-33/#">EPUB 3 Overview</a>. At its core, an EPUB is a ZIP archive of web files: (X)HTML, CSS, JS, manifests, and assets like images and fonts. Thus, EPUB already solves our first major problem: it is a self-contained format for an HTML document. An EPUB can be passed around as a single file like a PDF.
      </p>

      <details>
        <summary>What about other single-file web formats?</summary>
        EPUB is not the only file format that bundles a website into a single file. <a href="https://en.wikipedia.org/wiki/WARC_(file_format)">WARC</a>, <a href="https://en.wikipedia.org/wiki/Webarchive">webarchive</a>, and <a href="https://en.wikipedia.org/wiki/MHTML">MHTML</a> are all alternative formats. The major difference is that these formats are primarily designed for archiving snapshots of arbitrarily complex websites. EPUB is specifically designed for simpler documents like books and articles.
      </details>

      <p>EPUB addresses the chunking problem by supporting documents split into multiple HTML files. An EPUB contains a <a href="https://www.w3.org/TR/epub-33/#sec-package-doc">package document</a> that contains metadata like the <a href="https://www.w3.org/TR/epub-33/#sec-pkg-spine">reading order</a> of all the files, as well as a <a href="https://www.w3.org/TR/epub-33/#sec-nav">navigation document</a> that functions as a table of contents.</p>

      <p>EPUB addresses the problem of consistent rendering by providing the option for <a href="https://www.w3.org/TR/epub-33/#sec-fixed-layouts">fixed layout documents</a>. Such a document asserts that it must be rendered at a given resolution and with a given pagination. The format permits (but has not fully standardized) an EPUB to contain <a href="https://www.w3.org/TR/epub-multi-rend-11/">multiple renditions</a>, such that an EPUB could bundle both a reflowable and a fixed layout version of the same document. Multiple renditions would permit a reader to either read a document exactly as the author intended, or to read a version reflowed to fit their device.</p>
    </section>

    <!-- <code-description>
      <pre><code>fn main() {
  let <span id="code-1">x</span> = <span id="code-2">5</span>;
  <span id="code-4">let <span id="code-3">x</span> =</span> <span id="code-15">x</span> <span id="code-16">+</span> <span id="code-5">1</span>;
  <span id="code-18"><span id="code-7">{</span>
      <span id="code-8">let</span> <span id="code-9">x</span> = <span id="code-10">x</span> <span id="code-17">*</span> <span id="code-11">2</span>;
      println!("The value of x in the inner scope is: {x}");
  <span id="code-13">}</span></span>
  println!("The value of x is: {<span id="code-14">x</span>}");
}</code></pre>
      <p>
        <span data-type="code-step">This program first binds <a href="#code-1"><code>x</code></a> to a value of <a href="#code-2"><code>5</code></a>.</span>
        <span data-type="code-step">Then it creates a new variable <a href="#code-3"><code>x</code></a> by repeating <a href="#code-4"><code>let x =</code></a>,</span>
        <span data-type="code-step">taking <a href="#code-15">the original value</a> and <a href="#code-16">adding</a> <a href="#code-5">1</a> 
        so the value of <a href="#code-3"><code>x</code></a> is then 6.</span>
        <span data-type="code-step">Then, within an <a href="#code-18">inner scope</a> created with the <a href="#code-7">curly</a> <a href="#code-13">brackets</a>,</span> 
        <span data-type="code-step">the third <a href="#code-8"><code>let</code></a> statement also shadows <a href="#code-3"><code>x</code></a> and creates 
        <a href="#code-9">a new variable</a>,</span>
        <span data-type="code-step"><a href="#code-17">multiplying</a> <a href="#code-10">the previous value</a> by <a href="#code-11">2</a> 
        to give <a href="#code-9"><code>x</code></a> a value of 12.</span>
        <span data-type="code-step">When <a href="#code-18">that scope</a> <a href="#code-13">is over</a>, <a href="#code-9">the inner shadowing</a> ends and <a href="#code-14"><code>x</code></a> returns to being 6.</span>
      </p>
    </code-description>       -->

  </body>
</html>